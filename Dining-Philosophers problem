#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Thread function
void *thread_function(void *arg) {
    int thread_id = *((int *)arg);
    printf("Thread %d: Starting\n", thread_id);
    
    // Simulating some work using sleep
    for (int i = 1; i <= 5; i++) {
        printf("Thread %d: Working... %d\n", thread_id, i);
        sleep(1); // Simulate work with 1 second delay
    }

    printf("Thread %d: Finished\n", thread_id);
    return NULL;
}

int main() {
    pthread_t thread1, thread2; // Thread identifiers
    int thread_id1 = 1, thread_id2 = 2; // Arguments to pass to threads

    printf("Main: Creating threads\n");

    // Create first thread
    if (pthread_create(&thread1, NULL, thread_function, &thread_id1) != 0) {
        perror("Failed to create thread 1");
        exit(1);
    }

    // Create second thread
    if (pthread_create(&thread2, NULL, thread_function, &thread_id2) != 0) {
        perror("Failed to create thread 2");
        exit(1);
    }

    // Wait for threads to finish
    if (pthread_join(thread1, NULL) != 0) {
        perror("Failed to join thread 1");
        exit(1);
    }

    if (pthread_join(thread2, NULL) != 0) {
        perror("Failed to join thread 2");
        exit(1);
    }

    printf("Main: All threads finished\n");
    return 0;
}
