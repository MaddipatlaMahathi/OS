#include <stdio.h>
#include <limits.h>

// Define constants for the number of memory blocks and processes
#define NUM_BLOCKS 5
#define NUM_PROCESSES 4

// Function to implement First Fit strategy
void firstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[NUM_PROCESSES] = {-1}; // Allocation result

    // Process each process
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j; // Allocate block j to process i
                blockSize[j] -= processSize[i]; // Reduce available size
                break; // Move to next process
            }
        }
    }

    // Print results
    printf("\nFirst Fit Allocation:\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d -> Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d -> Not Allocated\n", i + 1);
    }
}

// Function to implement Best Fit strategy
void bestFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[NUM_PROCESSES] = {-1}; // Allocation result

    // Process each process
    for (int i = 0; i < processes; i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx])
                    bestIdx = j; // Find the smallest suitable block
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i]; // Reduce size
        }
    }

    // Print results
    printf("\nBest Fit Allocation:\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d -> Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d -> Not Allocated\n", i + 1);
    }
}

// Function to implement Worst Fit strategy
void worstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[NUM_PROCESSES] = {-1}; // Allocation result

    // Process each process
    for (int i = 0; i < processes; i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx])
                    worstIdx = j; // Find the largest suitable block
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i]; // Reduce size
        }
    }

    // Print results
    printf("\nWorst Fit Allocation:\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("Process %d -> Block %d\n", i + 1, allocation[i] + 1);
        else
            printf("Process %d -> Not Allocated\n", i + 1);
    }
}

int main() {
    // Initial memory blocks (sizes)
    int blockSize[NUM_BLOCKS] = {100, 500, 200, 300, 600};
    int processSize[NUM_PROCESSES] = {212, 417, 112, 426};

    printf("Initial Memory Blocks: ");
    for (int i = 0; i < NUM_BLOCKS; i++) {
        printf("%d ", blockSize[i]);
    }
    printf("\n");

    // First Fit
    int blockSize1[NUM_BLOCKS] = {100, 500, 200, 300, 600};
    firstFit(blockSize1, NUM_BLOCKS, processSize, NUM_PROCESSES);

    // Best Fit
    int blockSize2[NUM_BLOCKS] = {100, 500, 200, 300, 600};
    bestFit(blockSize2, NUM_BLOCKS, processSize, NUM_PROCESSES);

    // Worst Fit
    int blockSize3[NUM_BLOCKS] = {100, 500, 200, 300, 600};
    worstFit(blockSize3, NUM_BLOCKS, processSize, NUM_PROCESSES);

    return 0;
}
